using LibraryManagement.API.Data;
using LibraryManagement.API.Models;
using LibraryManagement.API.Models.Entity;
using LibraryManagement.API.DTOs;
using Microsoft.EntityFrameworkCore;

namespace LibraryManagement.API.Services
{
    public class NotificationService
    {
        private readonly LibraryDbContext _db;

        public NotificationService(LibraryDbContext db)
        {
            _db = db;
        }

        public async Task<List<NotificationDto>> GetNotificationsAsync(int libraryCardId, int page = 1, int pageSize = 20)
        {
            var notifications = await _db.Notifications
                .Where(n => n.LibraryCardId == libraryCardId)
                .OrderByDescending(n => n.CreatedAt)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .Include(n => n.Borrowing!)
                    .ThenInclude(b => b.BookItem!)
                    .ThenInclude(bi => bi.Book!)
                .ToListAsync();

            return notifications.Select(n => new NotificationDto
            {
                Id = n.Id,
                Title = n.Title,
                Message = n.Message,
                Type = n.Type.ToString(),
                IsRead = n.IsRead,
                CreatedAt = n.CreatedAt,
                BorrowingId = n.BorrowingId,
                BookTitle = n.Borrowing?.BookItem?.Book?.Title,
                BookImageUrl = n.Borrowing?.BookItem?.Book?.ImageUrl
            }).ToList();
        }

        public async Task<int> GetUnreadCountAsync(int libraryCardId)
        {
            return await _db.Notifications
                .Where(n => n.LibraryCardId == libraryCardId && !n.IsRead)
                .CountAsync();
        }

        public async Task<bool> MarkAsReadAsync(int notificationId, int libraryCardId)
        {
            var notification = await _db.Notifications
                .FirstOrDefaultAsync(n => n.Id == notificationId && n.LibraryCardId == libraryCardId);
            
            if (notification == null) return false;

            notification.IsRead = true;
            await _db.SaveChangesAsync();
            return true;
        }

        public async Task<bool> MarkAllAsReadAsync(int libraryCardId)
        {
            var notifications = await _db.Notifications
                .Where(n => n.LibraryCardId == libraryCardId && !n.IsRead)
                .ToListAsync();

            foreach (var n in notifications)
            {
                n.IsRead = true;
            }

            await _db.SaveChangesAsync();
            return true;
        }

        public async Task CreateNotificationAsync(CreateNotificationDto dto)
        {
            var notification = new Notification
            {
                LibraryCardId = dto.LibraryCardId,
                Title = dto.Title,
                Message = dto.Message,
                Type = Enum.TryParse<NotificationType>(dto.Type, out var type) ? type : NotificationType.General,
                BorrowingId = dto.BorrowingId,
                CreatedAt = DateTime.UtcNow
            };

            _db.Notifications.Add(notification);
            await _db.SaveChangesAsync();
        }

        public async Task NotifyBorrowSuccessAsync(int libraryCardId, int borrowingId, string bookTitle)
        {
            await CreateNotificationAsync(new CreateNotificationDto
            {
                LibraryCardId = libraryCardId,
                Title = "M∆∞·ª£n s√°ch th√†nh c√¥ng! üéâ",
                Message = $"B·∫°n ƒë√£ m∆∞·ª£n s√°ch \"{bookTitle}\" th√†nh c√¥ng. H√£y nh·ªõ tr·∫£ ƒë√∫ng h·∫°n nh√©!",
                Type = "BorrowSuccess",
                BorrowingId = borrowingId
            });
        }

        public async Task NotifyReturnSuccessAsync(int libraryCardId, string bookTitle)
        {
            await CreateNotificationAsync(new CreateNotificationDto
            {
                LibraryCardId = libraryCardId,
                Title = "Tr·∫£ s√°ch th√†nh c√¥ng! ‚úÖ",
                Message = $"B·∫°n ƒë√£ tr·∫£ s√°ch \"{bookTitle}\" th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!",
                Type = "ReturnSuccess"
            });
        }

        public async Task NotifyRenewSuccessAsync(int libraryCardId, int borrowingId, string bookTitle, DateTime newDueDate)
        {
            await CreateNotificationAsync(new CreateNotificationDto
            {
                LibraryCardId = libraryCardId,
                Title = "Gia h·∫°n th√†nh c√¥ng! üìÖ",
                Message = $"S√°ch \"{bookTitle}\" ƒë√£ ƒë∆∞·ª£c gia h·∫°n ƒë·∫øn {newDueDate:dd/MM/yyyy}.",
                Type = "RenewSuccess",
                BorrowingId = borrowingId
            });
        }

        public async Task NotifyDueSoonAsync(int libraryCardId, int borrowingId, string bookTitle, DateTime dueDate)
        {
            await CreateNotificationAsync(new CreateNotificationDto
            {
                LibraryCardId = libraryCardId,
                Title = "S√°ch s·∫Øp ƒë·∫øn h·∫°n! ‚è∞",
                Message = $"S√°ch \"{bookTitle}\" s·∫Ω ƒë·∫øn h·∫°n tr·∫£ v√†o {dueDate:dd/MM/yyyy}. Vui l√≤ng chu·∫©n b·ªã tr·∫£ s√°ch ho·∫∑c gia h·∫°n.",
                Type = "DueSoon",
                BorrowingId = borrowingId
            });
        }

        public async Task NotifyOverdueAsync(int libraryCardId, int borrowingId, string bookTitle, DateTime dueDate)
        {
            await CreateNotificationAsync(new CreateNotificationDto
            {
                LibraryCardId = libraryCardId,
                Title = "S√°ch qu√° h·∫°n! ‚ö†Ô∏è",
                Message = $"S√°ch \"{bookTitle}\" ƒë√£ qu√° h·∫°n t·ª´ {dueDate:dd/MM/yyyy}. Vui l√≤ng tr·∫£ s√°ch ngay!",
                Type = "Overdue",
                BorrowingId = borrowingId
            });
        }
    }
}